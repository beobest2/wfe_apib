FORMAT: 1A
HOST: http://192.168.100.100/api/v1/

# WFE (Work Flow Engine)

- Workflow-Manager
    - 다수 또는 단일 workflow-engine을 관리
    - REST api가 연결되는 통합 관리 모듈
    - manager가 관리하는 데이터베이스
        - config_db
        - engine_db
            - engine_id | engine_name | ip | port |
        - job_db
            - job_id | job_name | members | control | schedule | activity | create_time | update_time |
        - group_db
            - group_id | group_name | members | job_id | create_time | update_time |
        - flow_db
            - flow_id | flow_name | members | job_id | group_id | create_time | update_time |
        - task_db
            - task_id | task_name | command | is_daemon | output_type | description | engine_id | job_id | group_id | flow_id | create_time | update_time |
        - arrow_db
            - arrow_id | arrow_name | arrow_type | arrow | flow_id | create_time | update_time |
        
- Workflow-Engine
    - 실제 task를 띄우고 실행시키는 엔진
    - Task-agent 와 Task-monitor로 구성
        - Task-agent가 사용자가 지정한 cmd를 subprocess로 실행 
        - Task-monitor가 task 상태 모니터링 
- Job
    - 작업을 특정 시간 주기로 실행
        - task, flow, group 등록 가능
    - manager에서 crontab이 등록되어 실제 동작은 각 engine에서 수행
    - job 개별적 활성 상태 제어 가능
        - 제어 : enable | disable
        - 상태 : enabled | disabled
- Group
    - 동시 control을 위해 사용자가 지정하는 task,flow,group 집합
- Flow
    - 프로세스와 프로세스를(Task) 연결하는 흐름
        - ex > flow : A(task) ->(arrow) B(task) ->(arrow) C(task)
    - flow는 task, arrow를 포함
    - flow는 
        - start point task를 지정해서 flow 시작하거나, flow에 등록된 task sequence 순서대로 task 실행
        - task sequence 수정 가능
    - arrow가 끊어졌을 경우 splitted 상태 표시됨
- Task
    - 하나의 프로세스를 의미
    - 모든 프로그래밍 언어 지원
    - Workflow-Engine 에서 동작
    - output 메세지 전송 방식에 따라 broad, shared 두 가지 타입을 가짐
    - 동작 방식에 따라 Daemon, NoneDaemon 으로 구분됨
    - task 개별적인 실행 정지 control 가능
        - 상태 : init | act | trm | abn 
        - 제어 : act  | trm
    - 비정상 종료시 retry여부 option으로 지정 가능
        - retry 횟수 지정 가능
- Queue
    - Task간에 데이터가 공유되는 queue
    - 하나의 task는 input과 output 두가지의 queue를 가짐
    - 방향성 존재
    - task 중단시 옵션으로 Queue의 데이터를 비우거나 disk에 dump 가능
        - 재실행시 dump된 데이터 load 가능
    - broad 방식의 task일 때 목적 task의 input queue에 데이터를 전송
    - shared 방식의 task일 때 목적 task가 output queue에서 데이터를 번갈아가며 가져감
- Arrow
    - task간의 데이터 연결 방식을 정의하는 단위
    - flow가 먼저 정해진 후에 arrow 등록
    - arrow는 1:1로 두개의 task를 연결하는 형태
        - A -> B


## Engines [/engines]

### engine list 조회 - GET [GET]

- 등록된 engine을 목록으로 가져옴
    - WF-Manager 에 저장된 엔진 IP, Port, engine_name, id 정보
    - engine_name, engine_id는 전체 시스템에서 unique
- CLI
    ```
    $wf engine list
    ```
- example
    ```
    node01 $ wf engine list
    =========================================================================================
    ip_addr             port     engine_name     engine_id   engine_status   last_update_time           
    
    192.168.100.150     9292     test_engine      e1           valid          20181111000000
    192.168.100.151     9393     test_engine2     e2           valid          20181111000000
    =========================================================================================
    ```

+ Response 200 (application/json)

        
        {
                {
                    "IP_ADDR" : "192.168.100.11",
                    "PORT" : "5000",
                    "ENGINE_NAME": "test01",
                    "ENGINE_ID" : "e1",
                    "ENGHINE_URL" : "http://192.168.100.100/api/v1/engines/e1",
                    "ENGINE_STATUS" : "[VALID| INVALID | WAIT_RETRY]",
                    "LAST_UPDATE_TIME" : "20181111000000"
                },
                   
                {
                    "IP_ADDR" : "192.168.100.11",
                    "PORT" : "5002",
                    "ENGINE_NAME" : "test02",
                    "ENGINE_ID" : "e2",
                    "ENGHINE_URL" : "http://192.168.100.100/api/v1/engines/e2",
                    "ENGINE_STATUS" : "[VALID| INVALID | WAIT_RETRY]",
                    "LAST_UPDATE_TIME" : "20181111000000"
                },
                ...
        }

### engine 추가 - POST [POST]

- engine을 추가함
    - ip, port, engine_name을 파라메터로 전송 
    - manager에서 engine_id 생성하여 응답
    - 실제 engine이 동작하는지 IP, Port, ENGINE_NAME 중복여부 체크 후 리스트에 추가
- CLI
    ```
    $wf engine create --engine_name {test_engine} --ip {192.168.100.150} --port {9292}
    ``` 
- example
    ```
    node01 $ wf engine create –engine_name test_engine -ip 192.168.100.150 –port 9292
    +OK test_engine add (engine_id : e3)
    ```
    
+ Request (application/json)

        {
            "ENGINE_NAME" : "test_engine",
            "IP_ADDR": "192.168.100.21",
            "PORT" : "5050"
        }

        
+ Response 200 (application/json)

        {
            "RESULT" : "[OK|NOK]",
            "ENGINE_ID" : "e3",
            "MESSAGE" : "[MESSAGE_STRING | ERROR CODE]"
        }

        
## Engine [/engines/{engine_id}]

### engine 상세정보 조회 - GET [GET]

- engine의 상세 정보 조회
- resource 옵션을 통해 engine에서 돌아가는 task의 resource별 sum 조회 가능
- CLI
    ```
    $wf engine info --engine_id {e1} (--resource)
    ```
- example
    ```
    node01 $ wf engine info --engine_id e3 --resource
    ===================================
    ip_addr             192.168.100.150
    port                9292
    engine_name         test_engine
    engine_id           e1
    status              valid
    last_update_time    20181111000000
    num_of_task         10
    num_of_active_task  6
    cpu                 21
    memory              17
    disk_io             1
    network_io          1
    file_cnt            3
    thread_cnt          4
    ===================================
    ```

+ Request (application/json)

        {
            ** optional
            "RESOURCE" : "True|False"
        }
        
+ Response 200 (application/json)

        {
            "ENGINE_NAME" : "engine3",
            "IP_ADDR": "192.168.100.21",
            "PORT" : "5050",
            "ENGINE_STATUS" : "[VALID|INVALID|WAIT_RETRY]",
            "LAST_UPDATE_TIME" : "20181111000000",
            "NUM_OF_TASK" : "10",
            "NUM_OF_ACTIVE_TASK" : "6",
            
            (
            "CPU": "23",
            "MEMORY" : "30",
            "DISK_IO" : "11",
            "NETWORK_IO" : "1",
            "FILE_CNT" : "3",
            "THREAD_CNT" : "4"
            )
        }

### engine 삭제 - DELETE [DELETE]

- 등록된 engine 정보를 삭제함
- CLI
    ```
    $wf engine del --engine_id {e1}
    ``` 
- example
    ```
    node01 $ wf engine del –engine_id e3
    +OK engine "e3" is deleted.
    ```
        
+ Response 200 (application/json)

        {
            "RESULT" : "[OK | NOK]",
            "MESSAGE" : "[MESSAGE_STRING | ERROR CODE]"           
        }
        
## Engine statistic [/engines/{engine_id}/statistic]

### Engine 통계정보 조회 - GET [GET]

- Engine의 통계 정보를 받아옴 (global_queue)
- CLI
    ```
    $wf engine statistic --engine_id {e1}
    ```
    
+ Response 200 (application/json)

        {
    
            * engine 통계 정보
            변경 history, 실행 결과 history 등
            ...
        }

            
## Configs [/configs]

### config 조회 - GET [GET]

- WFE의 전반적인 설정 사항을 목록으로 가져옴
- CHANGEABLE 옵션을 주어 변경 가능 or 변경 불가능 옵션별 조회 가능
- CLI
    ```
    $wf config list (--engine_id {e1}) (--changeable [True|Flase])
    ```


+ Request optional (application/json)

        ** optional
        {
            ("ENGINE_ID" : "e1"),
            ("CHANGEABLE" : "[TRUE|FALSE]")
        }
        
+ Response 200 (application/json)

        {

           {
               "KEY" : "[KEY_STRING]",
               "VALUE" : "[VALUE_STRING]",
               "CHANGEABLE" : "[True|False]"
           }
           ,
           ...
           
        }
        

### config 변경 - PUT [PUT]

- 저장된 설정 정보 변경
- CHANGEABLE이 TRUE인 설정만 변경 가능
- CLI
    ```
    $wf config update --key {value}
    ```


+ Request (application/json)

           {
               "KEY" : "[변경하고자 하는 VALUE]"
           }
        

+ Response 200 (application/json)

        
           {
               "RESULT" : "[OK|NOK]",
               "MESSAGE" : "[MESSAGE_STRING | ERROR CODE]"           
           }

        
 
## Jobs [/jobs]

### job list 조회 - GET [GET]

- 등록된 모든 job 목록 가져옴
- CLI
    ```
    $wf job list
    ```
- example
    ```
    node01 $ wf job list
    =====================================================================
    job_name       job_id   members   control       schedule     activity
    
    parsing_job     j1       t1,t3      act         */1 * * *    active
    load_aaa01      j2       f1,t4      act         */5 * * *    inactive
    =====================================================================
    ```
        
+ Response 200 (application/json)

        {
           
               {
                   "JOB_NAME" : "parsing_job",
                   "JOB_ID" : "j1",
                   "JOB_URL" : "http://192.168.100.100/api/v1/jobs/j1",
                   
                   "MEMBERS" : "t1,t2,f3",
                   "CONTROL" : "act",
                   "SCHEDULE" : "*/1 * * *",
                   
                   "ACTIVITY" : "ENABLE",
                   "CALLBACK_URL" : "192.168.100.111/callback"
                   
               },
               ...
        }

### job 생성 - POST [POST]

- job을 생성함, crontab에 등록됨
- job이 등록될 engine, 등록할 작업(flow | group | task), job_name, schedule(시간 주기) 입력
- job_id 반환
- CLI
    ```
    $wf job create --job_name {job01}  (--members {t1,t2,f4}) --control [act|trm] --schedule {*/1 * * * *}
    ```
    
+ Request (application/json)

        {
                "JOB_NAME" : "job01",
                "MEMBERS" : "t1,t2,f4",
                "CONTROL" : "act",
                "SCHEDULE": "*/1 * * * *"
        }
        
        
+ Response 200 (application/json)

           {
               "RESULT" : "[OK|NOK]",
               "JOB_ID" : "j1"
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"
           }

        
## Job [/jobs/{job_id}]

### job 상세 정보 조회 - GET [GET]
- job 상세정보 조회
- job list와 출력 결과 차이가 거의 없음 ??
- CLI
    ```
    $wf job info --job_id {j1}
    ```
    
    
+ Response 200 (application/json)


           {
               "JOB_NAME" : "parsing_job",
               "JOB_ID" : "j1",
               "JOB_URL" : "http://192.168.100.100/api/v1/jobs/j1",
               
               "MEMBERS" : "t1,t2,f3",
               "CONTROL" : "act",
               "SCHEDULE" : "*/1 * * *",
               
               "CALL_BACK_URL" : "192.168.100.111/callback"
           }
           
### job 상태 변경 - PUT [PUT]
- job 설정 정보 변경
    - job 실행 주기를 변경한다
    - job contents 변경 가능
- CLI
    ```
    $wf job update --job_id {j1} --schedule {*/10 * * * *}
    ```
- update를 통해 job에 등록된 members에 group|flow|task 추가|삭제 가능
    - group_add|flow_add|task_add를 통해 member 추가
    - group_remove|flow_remove|task_remove를 통해 meber 삭제
- example
    ```
    node01 $ wf job update --job_id j1 task_add t5
    +OK task "t5" is added on job "j1".
    ```

+ Request (application/json)
           
            {   
                "task_add" : "t5"
            }
           
+ Response 200 (application/json)

           {
               "RESULT" : "[OK|NOK]",
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"
           }  
        

### job 삭제 - DELETE [DELETE]

- 등록되어있는 job을 삭제함
- CLI
    ```
    $wf job del --job_id {j1}
    ```
        
+ Response 200 (application/json)

           {
               "RESULT" : "[OK|NOK]",
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"
           } 

## Job activity [/jobs/{job_id}/activity]


### Job 실행 제어 - PUT [PUT]

- job의 활성 상태를 ENABLE | DISABLE 을 통해 ENABLED | DISABLED 시킴
- job 처음 생성 시 enable, 잠시 멈추고 싶을때 해당 명령어 사용
- CLI
    ```
    $wf job activity --job_id {j1} {[enable|disable]}
    ```
 
    
+ Request (application/json)

            {
               "ACTIVITY" : "[enable|disable]"
            }
        
+ Response 200 (application/json)

           {
               "RESULT" : "[OK|NOK]",
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"
           } 


## Job statistic [/jobs/{job_id}/statistic]

### Job 통계정보 조회 - GET [GET]

- Job 통계 정보를 받아옴
- CLI
    ```
    $wf job statistic --job_id {j1}
    ```
    
+ Response 200 (application/json)

        {
            * job 통계 정보
                생성자, 실행자, 변경 history, 실행 결과 history 등
        }


## Groups [/groups]

### group 조회 - GET [GET]

- 등록된 group 목록을 받아옴
- group db는 중앙 manager 관리
- CLI
    ```
    $wf group list
    ```
- example
    ```
    node 01 $ wf group list
    ==================================================================
    group_name      group_id       member_count      trm/init/act/abn
    
    rnc01           g1                4               4/0/0/0
    parser_group    g2                3               2/0/1/0
    ==================================================================
    ```
+ Response 200 (application/json)

        {
               
                {
                    "GROUP_ID" : "g1",
                    "GROUP_NAME" : "rnc01",
                    "GROUP_URL" : "http://192.168.100.100/api/v1/groups/g1",
                    
                    "MEMBER_COUNT" : "4",
                    "TRM_COUNT" : "4",
                    "INIT_COUNT" : "0",
                    "ACT_COUNT" : "0",
                    "ABN_COUNT" : "0"
                },
                {
                    "GROUP_ID" : "g2",
                    "GROUP_NAME" : "parser_group",
                    "GROUP_URL" : "http://192.168.100.100/api/v1/groups/g2",
                    
                    "MEMBER_COUNT" : "3",
                    "TRM_COUNT" : "2",
                    "INIT_COUNT" : "0",
                    "ACT_COUNT" : "1",
                    "ABN_COUNT" : "0"
                },
            ...
            ...
        }
  
### group 생성 - POST [POST]

- group을 생성함
    - group을 생성할 group_name 입력
    - optional 하게 초기에 group에 속할 task or flow 목록 입력 가능
    - group_name 중복 불가
- group_id 반환
- CLI
    ```
    $wf group create --group_name {rnc01} (--members t1,t2,f3)
   
+ Request (application/json)

        {
               "GROUP_NAME": "rnc01",
               ("MEMBERS" : "t1,t2,f3")
        }
        

+ Response 200 (application/json)

           {
               "RESULT" : "[OK|NOK]",
               "GROUP_ID" : "g1"
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"             
           }
    
## Group [/groups/{group_id}]

### group 상세 정보  조회 - GET [GET]
- group 상세 정보 조회
- CLI
    ```
    $wf group info --group_id {g1} 
    ```
- example
    ```
    node 01 $ wf group info --group_id g1
    =========================================================================
    group_name      group_id       member_type      member_name     member_id
    
    rnc01           g1               flow               flow01          f1
    rnc01           g1               flow               flow02          f2
    rnc01           g1               flow               flow03          f3
    rnc01           g1               task               task01          t1
    =========================================================================
    ```
    
+ Response 200 (application/json)


        {
            "GROUP_ID" : "g1",
            "GROUP_NAME" : "rnc01",
            "GROUP_URL" : "http://192.168.100.100/api/v1/groups/g1",
            "CREATE_TIME": "20180707111111", 
            "UPDATE_TIME": "20180707111111",
            
            "MEMBERS" :
            {
                {
                    "MEMBER_TYPE" : "FLOW",
                    "MEMBER_NAME" : "flow01",
                    "MEMBER_ID" : "f1",
                },
                {
                    "MEMBER_TYPE" : "TASK",
                    "MEMBER_NAME" : "parse_task",
                    "MEMBER_ID" : "t2",
                },
                ...
        }
        
### group 정보 변경 - PUT [PUT]
- group 정보 변경
- group_contents 수정 가능
- CLI
    ```
    $wf group update --group_id {g1} --key {value}
    ```
- update를 통해 group에 등록된 members에 flow|task 추가|삭제 가능
    - flow_add|task_add를 통해 member 추가
    - flow_remove|task_remove를 통해 meber 삭제
- example
    ```
    node01 $ wf group update --group_id g1 task_add t5
    +OK task "t5" is added on group "g1".
    ```


+ Request (application/json)

        {
            "TASK_ADD" : "t5"
        }
        
+ Response 200 (application/json)

           {
               "RESULT" : "[OK|NOK]",
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"             
           }
           

### group 삭제 - DELETE [DELETE]
    
- group  둥록 정보 삭제
- CLI
    ```
    $wf group del --group_id {g1}
    ```
           
+ Response 200 (application/json)

           {
               "RESULT" : "[OK|NOK]",
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"             
           }
        
## Group control [/groups/{group_id}/control]

### group 상태 변경 - PUT [PUT]

- group에 속한 모든  task의 상태를 한꺼번에 끄거나 킴
- CLI
    ```
    $wf group control {[act|term]} --group_id {g1}
    ```
    
+ Request (application/json)
       
            {
                "CONTROL" : "[act|term]"
            }
           
+ Response 200 (application/json)

           {
               "RESULT" : ["OK"|"NOK"],
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"             
           }

## Group status [/groups/{group_id}/status]

### group 상태 조회 - GET [GET]

- group에 속한 모든  task의 상태를 조회
    - flow가 멤버일 경우 해당 flow에 속하는 task 상태 표시 ??
- CLI
    ```
    $wf group status --group_id {g1}
    ```

- example
    ```
    node 01 $ wf group status --group_id g1
    =================================================================================================================================
    group_name      group_id        member_type       member_name          member_id      status    last_exit_code  last_update_time
    
    rnc01           g1              task              get_ftp_rnc01         t1           trm          1             20181117125630
    rnc01           g1              task              trans                 t2           trm          1             20181117125630
    rnc01           g1              task              parser                t3           trm          1             20181117125630
    rnc01           g1              task              loader                t4           trm          1             20181117125630
    =================================================================================================================================
    ```
+ Response 200 (application/json)

        {
            "GROUP_ID" : "g1",
            "GROUP_NAME" : "rnc01",
            "GROUP_URL" : "http://192.168.100.100/api/v1/groups/g1",
            
            "MEMBERS" :
            {
                {
                    "MEMBER_TYPE" : "TASK",
                    "MEMBER_NAME" : "task01",
                    "MEMBER_ID" : "t1",
                    "MEMBER_STATUS" : "trm",
                    "LAST_EXIT_CODE" : "1",
                    "LAST_UPDATE_TIME" : "20181117125630"
                },
                {
                    "MEMBER_TYPE" : "TASK",
                    "MEMBER_NAME" : "parse_task",
                    "MEMBER_ID" : "t2",
                    "MEMBER_STATUS" : "trm",
                    "LAST_EXIT_CODE" : "1",
                    "LAST_UPDATE_TIME" : "20181117125630"
                },
                ...
        }


## Flows [/flows]

### flow list 조회 - GET [GET]

- 등록된 flow 목록을 받아옴
- CLI
    ```
    $wf flow list
    ```
- example
    ```
    node01 $ wf flow list
    =================================================================================================================================
    flow_name       flow_id     member_count        trm/init/act/abn        is_splitted        input_msg_count       output_msg_count
    
    flow_rnc01        f1            5                  1/0/4/0                True                 0                     1000    
    =================================================================================================================================
    ```
        
+ Response 200 (application/json)

        {
                {
                    "FLOW_ID" : "f1",
                    "FLOW_NAME": "flow_rnc01",
                    "FLOW_URL" : "http://192.168.100.100/api/v1/flows/f1",
                    
                    "MEMBER_COUNT" : "5",
                    "INIT_COUNT" : "0",
                    "ACT_COUNT" : "4",
                    "TRM_COUNT" : "1",
                    "ABN_COUNT" : "0",
                    
                    "IS_SPLITTED" : "True",
                    
                    "INPUT_MSG_COUNT" : "0",
                    "OUTPUT_MSG_COUNT" : "1000"
                    
                },
            ...
        }

### flow 생성 - POST [POST]

- flow를 생성함
    - flow_name을 입력하면 flow가 생성되고 flow_id반환
    - flow_name 중복 불가
    - optinal 하게 생성시 초기 등록할 task 목록 추가 가능
- CLI
    ```
    $wf flow create --flow_name {flow01} (--members {t1,t2})
    ```
    

+ Request (application/json)

        {
                "FLOW_NAME": "flow01",
                ("MEMBERS" : "t1,t2")
        }

+ Response 200 (application/json)

           {
               "RESULT" : "[OK|NOK]",
               "FLOW_ID" : "f2",
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"             
           }


        
## Flow [/flows/{flow_id}]

### flow 상세 정보 조회 - GET [GET]
- flow 상세 정보 조회
- CLI
    ```
    $wf flow info --flow_id {f1}
    ```
- example
    ```
    node01 $ wf flow info --flow_id f1
    =============================================================================
    sequne  flow_name       flow_id     member_type     member_name   member_id     
                                                                                                           
    1        flow_rnc01        f1          task      get_ftp_rnc01    t1               
    2        flow_rnc01        f1          task      parser           t2              
    3        flow_rnc01        f1          task      trnas            t3               
    4        flow_rnc01        f1          task      loader           t4             
    
    None     flow_rnc01        f1          arrow      ar1             a1                                                                      
    None     flow_rnc01        f1          arrow      ar2             a2                                                                        
    None     flow_rnc01        f1          arrow      ar3             a3                                                                      
    ==============================================================================
    ```

+ Response 200 (application/json)

        
        {
            "FLOW_ID" : "f2",
            "FLOW_NAME": "happy_flow",
            "FLOW_URL" : "http://192.168.100.100/api/v1/flows/f2",
            
            "MEMBERS" :
            {
                "TASKS" {
                    { 
                        "TASK_NAME" : "task01",
                        "TASK_ID" : "t5",
                        "TASK_URL" : "http://192.168.100.100/api/v1/tasks/t5"
                        "SEQUENCE" : "1"
                    },
                    ...
                },
                
                "ARROWS" {
                    { 
                        "ARROW_NAME" : "arrowt5t2",
                        "ARROW_ID" : "a5",
                        "ARROW_URL" : "http://192.168.100.100/api/v1/arrows/a5"
                    },
                    ...
                }
            },
            "CREATE_TIME": "20180707111111", 
            "UPDATE_TIME": "20180707111111",
            
        }
        
### flow 수정 - PUT [PUT]

- 해당 flow를 수정함
- task를 flow에 추가하는데 사용
- CLI
    ```
    $wf flow update --flow_id {f1} --key {value}
    ```
- update를 통해 group에 등록된 members에 task 추가|삭제 가능
    - task_add를 통해 member 추가
    - task_remove를 통해 meber 삭제
- example
    ```
    node01 $ wf flow update --flow_id f1 task_add t5
    +OK task "t5" is added on flow "f1".
    ```

+ Request (application/json)

           {
               "TASK_ADD" : "t5"
           }

        
+ Response 200 (application/json)

           {
               "RESULT" : ["OK"|"NOK"],
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"             
           }
           
### flow 삭제 - DELETE [DELETE]

- 해당 flow 등록 정보를 삭제함
- flow에 속한 task와 arrow도 함께 삭제됨 ?? (arrow만 삭제?)
- locking check
    - flow가 현재 동작중인지 체크
- CLI
    ```
    $wf flow del --flow_id {f1}
    ```
        
+ Response 200 (application/json)

           {
               "RESULT" : "[OK|NOK]",
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"             
           }


## Flow control [/flows/{flow_id}/control]

### flow 실행 제어 - PUT [PUT]

- CLI
    ```
    $wf flow control [act|trm] --flow_id {f1}
    ```
    
    
+ Request (application/json)
        
            {
                 "CONTROL" : "[act|trm]"
            }
            
        
+ Response 200 (application/json)

           {
               "RESULT" : "[OK|NOK]",
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"             
           }


## Flow status [/flows/{flow_id}/status]

### flow 상태 조회 - GET [GET]
- flow의 상태를 조회
- CLI
    ```
    $wf flow status --flow_id {f1}
    ```
- example
    ```
    node01 $ wf flow status --flow_id f1
    =============================================================================================================================
    sequne  flow_name       flow_id     member_type     member_name   member_id    status  last_exit_code   last_update_time  input_msg_count output_msg_count   output_type  arrow
                                                                                                           
    1        flow_rnc01        f1          task      get_ftp_rnc01    t1            act     1               20181211100523        0         10020                   broad    
    2        flow_rnc01        f1          task      parser           t2            trm     1               20181211100523        0          0                      broad   
    3        flow_rnc01        f1          task      trnas            t3            act     1               20181211100523        0           0                     broad    
    4        flow_rnc01        f1          task      loader           t4            act     1               20181211100523        0           0                     broad    
    
           flow_rnc01        f1          arrow      ar1             a1                                                                                                  t1 -> t2    
           flow_rnc01        f1          arrow      ar2             a2                                                                                                  t2 -> t3    
           flow_rnc01        f1          arrow      ar3             a3                                                                                                  t3 -> t4    
    ==============================================================================================================================
    ```
+ Response 200 (application/json)


        
            {
                "FLOW_NAME": "flow_rnc01",
                "FLOW_ID" : "f1",
                "FLOW_URL" : "http://192.168.100.100/api/v1/flows/f1",
                
                "MEMBERS" :
                {
                    "TASKS" :
                    {
                        {
                            "TASK_NAME" : "get_ftp_rnc01",
                            "TASK_ID" : "t1",
                            "TASK_STATUS" : "act",
                            "LAST_EXIT_CODE" : "1",
                            "LAST_UPDATE_TIME" : "20181211100523",
                            "INPUT_MSG_COUNT" : "0",
                            "OUTPUT_MSG_COUNT" : "10020",
                            "OUTPUT_TYPE" : "broad"
                        },
                        ...
                    },
                    
                    "ARROWS" :
                    {
                        {
                            "ARROW_NAME" : "ar1",
                            "ARROW_ID" : "a1",
                            "TASK_STATUS" : "act",
                            "ARROW" : "t1->t2"
                        },
                        ...
                    }
                }
            }
        
   
## Tasks [/tasks]

### task list 조회 - GET [GET]
- 등록된 Task 정보를 목록으로 가져옴
- 옵션을 통해 특정 엔진의 task 리스트만 조회 가능
- CLI
    ```
    $wf task list (--engine_id {e1})
    ```
- example
    ```
    node 01 $ wf task list
    =============================================================================================================================
    engine_name     engine_id       task_name       task_id     flow_id   group_id    status    last_exit_code  last_update_time
    
    test_engine        e1         get_ftp_rnc01     t1          None       g1       act             1            20180703121103
    test_engine        e1         parser            t2          None       g1       act             1            20180703121103
    test_engine        e1         trans             t3          None       g1       act             1            20180703121103
    test_engine        e1         loader            t4          None       g1       act             9            20180703121103
    ==============================================================================================================================
    ```
    
+ Request (application/json)

        ** optional
        {
            "ENGINE_ID" : "e1"
        }
        
+ Response 200 (application/json)

        {

           {
                "ENGINE_ID" : "e1",
                "ENGINE_NAME" : "engine01",
                "ENGINE_URL" : "http://192.168.100.100/api/v1/engines/e1",
                
                "TASK_ID" : "t1",
                "TASK_NAME" : "get_ftp_rnc01",
                "TASK_URL" : "http://192.168.100.100/api/v1/tasks/t1",
                
                "GROUP_ID" : "g1",
                "FLOW_ID" : "None",
                
                "TASK_STATUS" : "act",
                "LAST_EXIT_CODE" : "1",
                "LAST_UPDATE_TIME" : "20180703121103"
           },
           ...

        }
        

### Task 생성 - POST [POST]

- task를 생성함
    - 생성할 task의 engine, task의 이름 지정
    - 생성된 task의 id 반환
- Task option에 daemon여부 설정 가능
    - Daemon인 경우 상시 동작하는 프로세스
- output_type을 설정 가능 default : broad
- task name 은 같은 engine내에서는 중복 불가
- CLI
    ```
    $wf task create --task_name {task01} --command {“python test01.py arg1”} --engine_id {e1}  (--output_type {broad}) (--is_daemon [True|False]) (--description {"this is .."})
    ```

+ Request (application/json)

           {
                "TASK_NAME": "task01",
                "COMMAND": "python test01.py arg1",
                "ENGINE_ID" : "e1",
                ("IS_DAEMON" : "True" [default는 broad]),
                ("OUPTPUT_TYPE" : "shared"),
                ("DESCRIPTION": "this is parser")
           }
        
        
+ Response 200 (application/json)


           {
               "RESULT" : "[OK|NOK]",
               "TASK_ID" : "t1"
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"             
           }



## Task [/tasks/{task_id}]

### task 상세 정보 조회 - GET [GET]
- task 상세 정보 조회
- CLI
    ```
    $wf task info --task_id {t1} 
    ```
- example
    ```
    node 01 $ wf task info --task_id t1
    =======================================
    engine_name     test_engine 
    engine_id       e1
    task_name       engine01
    task_id         t1
    flow_id         None
    group_id        g1
    is_daemon       false    
    output_type     broad
    command         "python parser.py arg1" 
    description     "this is parser"
    ========================================
    ```
    
+ Response 200 (application/json)


           {
                "ENGINE_NAME" : "engine01",
                "ENGINE_ID" : "e1",
                "ENGINE_URL" : "http://192.168.100.100/api/v1/engines/e1",
                
                "TASK_NAME" : "task01",
                "TASK_ID" : "t1",
                "TASK_URL" : "http://192.168.100.100/api/v1/tasks/t1",
                "CREATE_TIME": "20180707111111",
                "UPDATE_TIME" : "20180804112230",
                
                "GROUP_ID" : "None",
                "FLOW_ID" : "f1",
                
                "IS_DAEMON" : "False",
                "OUTPUT_TYPE" : "broad"
                
                "COMMAND" : "python parser.py arg1 arg2",
                "DESCRIPTION" : "this is parser program for project AAA"
            }
        
        
### task 상세 정보 변경 - PUT [PUT]
- task의 상세 정보를 변경
- CLI
    ```
    $wf task update --task_id {t1} --key {value}
    ```

+ Request (application/json)

        {
           {
               "KEY" : "IS_DAEMON",
               "VALUE" : "False"
           },
           ...
        }

        
+ Response 200 (application/json)

           {
               "RESULT" : "[OK|NOK]",
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"             
           }


### task 삭제 - DELETE [DELETE]

- 등록된 Task 삭제
- locking check
    - 현재 task가 속한 flow가 동작중인지 확인
- CLI
    ```
    $wf task del --task_id {t1}
    ```

+ Response 200 (application/json)

           {
               "RESULT" : "[OK|NOK]",
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"             
           }

## Task control [/tasks/{task_id}/control]


### task 제어 - PUT [PUT]

- task의 상태를 act|trm 을 통해 동작 제어
- CLI
    ```
    $wf task control [act|trm] --task_id {t1}
    ```
    
+ Request (application/json)

    
           {
               "CONTROL" : "[act|trm]"
           }
        
        
+ Response 200 (application/json)


           {
               "RESULT" : "[OK|NOK]",
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"             
           }


## Task status [/tasks/{task_id}/status]


### task 상태 조회 - GET [GET]

- task의 상태를 조회
- resource option을 통해 task 기반 리소스 모니터링 가능
- CLI
    ```
    $wf task status --task_id {t1} (--resource)
    ```
- example
    ```
    node 01 $ wf task status --task_id t1
    =====================================
    task_name           engine01
    task_id             t1
    status              act
    last_exit_code      1
    last_update_time    20180703121103
    act_count           523
    pid                 1234
    memory              10
    disk_io             1
    network_io          1
    file_count          10
    thread_count        5
    ======================================
    ```

+ Response 200 (application/json)


           {
                "ENGINE_NAME" : "engine01",
                "ENGINE_ID" : "e1",
                "ENGINE_URL" : "http://192.168.100.100/api/v1/engines/e1",
                
                "TASK_NAME" : "task01",
                "TASK_ID" : "t1",
                "TASK_URL" : "http://192.168.100.100/api/v1/tasks/t1",
                
                "TASK_STATUS" : "act",
                "LAST_EXIT_CODE" : "1",
                "LAST_UPDATE_TIME" : "20181111000000",
                "ACT-COUNT" : "523",
                
                (
                "PID" : "1234",
                "CPU": "20",
                "MEMORY": "10",
                "DISK_IO": "1",
                "NETWORK_IO" : "1",
                "FILE_COUNT" : "10",
                "THREAD_COUNT" : "5"
                )
            }
            
        
## Task log [/tasks/{task_id}/log]

### task 기반 리소스 모니터링 - GET [GET]

- task 기반 리소스 모니터링
- follow 옵션을 통해 tail 처럼 실시간 조회 가능
- CLI
    ```
    $wf task log --task_id {t1} (--follow (DEFAULT:False))
    ```


+ Request (application/json)

           {
           ** optional
               ("FOLLOW" : "True")
           }
           
+ Response 200 (application/json)

           {
                "TASK_LOG" : "..."
           }
           

## Task queue [/tasks/{task_id}/queue]

### queue 정보 받아옴 - GET [GET]

- 해당 task의 모든 queue 정보를 가져옴
- CLI
    ```
    $wf task queue --task_id {t1}
    ```
    
+ Response 200 (application/json)

           {
                "ENGINE_NAME": "engine01",
                "ENGINE_ID" : "e1",
                "ENGINE_URL" : "http://192.168.100.100/api/v1/engines/e1",
                
                "TASK_NAME" : "task01",
                "TASK_ID" : "t1",
                "TASK_URL" : "http://192.168.100.100/api/v1/tasks/t1",
                
                "TASK_QUEUE" : 
                    {
                        "INPUT_QUEUE" :
                        {
                            data
                        },
                        "OUTPUT_QUEUE" :
                        {
                            data
                        }
                    }
           }

### queue에 데이터를 넣음 - PUT [PUT]
    
- 해당 task의 stdin queue에 데이터를 넣음
- CLI
    ```
    $wf task queue put --task_id {task01} --data {data}
    ```

+ Request (application/json)

        {
               "DATA" : "data"
        }
        
+ Response 200 (application/json)

           {
               "RESULT" : "[OK|NOK]",
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]" 
           }

### queue에 데이터를 비움 - DELETE [DELETE]
    
- 해당 task의 queue에 저장되어있는 데이터를 비움
- CLI
    ```
    $wf task queue empty --task_id {task01}
    ```
        
+ Response 200 (application/json)

           {
               "RESULT" : "[OK|NOK]",
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"  
            }

    
## Arrows [/arrows]

### arrow list 조회 - GET [GET]

- 등록된 arrow의 목록 조회
- engine 정보를 옵션으로 주어 해당 flow arrow 목록만 조회 가능
- CLI
    ```
    $wf arrow list (--flow_id {f1})
    ```

+ Request optional (application/json)

        ** optional
        {
                ("FLOW_ID" : "f1")
        }
        
+ Response 200 (application/json)

        
        {
            {

                "FLOW_NAME" : "flow01",
                "FLOW_ID" : "f1",
                "FLOW_URL" : "http://192.168.100.100/api/v1/flows/f1",
                
                "ARROW_NAME" : "ARROW_NAME",
                "ARROW_ID" : "a1",
                "ARROW_URL" : "http://192.168.100.100/api/v1/arrows/a1",
                
                "ARROW" : "t1->t2",
                "SCOPE" : "local"
            },
             {

                "FLOW_NAME" : "flow01",
                "FLOW_ID" : "f1",
                "FLOW_URL" : "http://192.168.100.100/api/v1/flows/f1",
                
                "ARROW_NAME" : "ARROW_NAME",
                "ARROW_ID" : "a2",
                "ARROW_URL" : "http://192.168.100.100/api/v1/arrows/a2",
                
                "ARROW" : "t2->t3"
                "SCOPE" : "global"
            },
            ...
        }

### arrow 등록 - POST [POST]

- 새로운 arrow를 등록함
    - arrow를 등록할 flow와 arrow 정보를 함께 입력
    - 다른 engine의 task끼리 연결 가능
        - local arrow
        - global arrow
    - arrow id 반환
    - arrow가 생성되거나 방향이 변경될때, 연결된 둘 중 하나의 task가 동작중이면 데이터를 보낸다
- CLI
    ```
    $wf arrow create --arrow_name {arrow01} --flow_id {f1} --arrow {t1->t2}
    ```

+ Request (application/json)

        {
                "FLOW_ID" : "f1",
                "ARROW_NAME": "arrow01",
                
                "ARROW": "t1->t2"    
        }
        
+ Response 200 (application/json)

           {
               "RESULT" : "[OK|NOK]",
               "ARROW_ID": "a5",
               "SCOPE" : "GLOBAL",
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"             
           }
        
        
## Arrow [/arrows/{arrow_id}]


### arrow 상세 정보 조회 - GET [GET]
- arrow 상세 정보 조회
- CLI
    ```
    $wf arrow info --arrow_id {a1}
    ```
+ Response 200 (application/json)


            {
                
                "FLOW_NAME" : "flow01",
                "FLOW_ID" : "f1",
                "FLOW_URL" : "http://192.168.100.100/api/v1/flows/{flow_id}",
                
                "ARROW_NAME" : "ARROW_NAME",
                "ARROW_ID" : "a1",
                "ARROW_URL" : "http://192.168.100.100/api/v1/arrows/{arrow_id}"
                "CREATE_TIME" : "20180504112230",
                "UPDATE_TIME" : "20180504112230",
                
                "ARROW" : "t1 -> t2",
                "SCOPE" : "global"
            }



### arrow 정보 수정 - PUT [PUT]
- 해당 arrow를 수정함
- 수정 가능 사항만 수정 가능
    - arrow type
    - arrow
- CLI
    ```
    $wf arrow update --arrow_id {a1} --arrow {t1->t3}
    ```

+ Request (application/json)

           {
               "ARROW" : "t1->t3"
           }
        

+ Response 200 (application/json)

           {
               "RESULT" : "[OK|NOK]",
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"             
           }
           
### arrow 삭제 - DELETE [DELETE]


- locking check
    - 현재 arrow가 속한 flow가 동작중인지 확인
- CLI
    ```
    $wf arrow del --arrow_id {a1}
    ```

+ Response 200 (application/json)

           {
               "RESULT" : "[OK|NOK]",
               "MESSAGE" : "[MESSAGE_STRING | ERROR_CODE]"             
           }