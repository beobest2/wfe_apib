FORMAT: 1A
HOST: http://192.168.100.100/api/v1/

# WFE (Work Flow Engine)

    표준입출력( Standard In / Out / Error )을 이용하여 다수의 프로세스를 연결

- Workflow-Manager
    - 다수 또는 단일 workflow-engine을 관리
    - Cli 와 REST api가 연결되는 통합 관리 모듈
- Workflow-Engine
    - 실제 task를 띄우고 flow를 관리하는 engine
    - 한대의 노드(ip)에 하나의 engine이 동작
- Task
    - 하나의 프로세스를 의미
    - 하나의 프로세스에서 하나 이상의 작업 수행 가능
    - 모든 프로그래밍 언어 지원
- Queue
    - Task간에 데이터가 공유되는 queue
    - 하나의 task는 input과 output 두가지의 queue를 가짐
    - 방향성 존재
- Arrow
    - task간의 데이터 연결 방식을 정의하는 단위
    - arrow는 1:1, 1:n, n:1, n:n 형태를 모두 지원
    - broad, shared 두 가지 타입을 가짐
- Flow
    - 프로세스와 프로세스를(Task) 연결하는 흐름
        - ex > flow : A(task) ->(arrow) B(task) ->(arrow) C(task)
- Job
    - crontab에 등록하는 일의 단위 
    - 다수의 Task와 Flow로 구성
    - 단일 Task도 job이 될 수있음
-  Group
    - Task 집합

## Engines [/engines]

### engine list 조회 - GET [GET]

- 등록된 engine을 목록으로 가져옴
        
+ Response 200 (application/json)

        
        {
               "ENGINES" : [
                   {
                       "IP_ADDR" : "192.168.100.11",
                       "ENGINE_ID" : "1"
                       "STATUS" : "[VALID/INVALID/BUSY/WAIT]",
                   },
                   
                   {
                       "IP_ADDR" : "192.168.100.11",
                       "ENGINE_ID" : "2"
                       "STATUS" : "[VALID/INVALID/BUSY/WAIT]",
                   },
                   ...
               ]
        }

### engine 추가 - POST [POST]

- engine을 추가함


+ Request (application/json)

        {
               "ENGINES" : [
                   {
                    "IP_ADDR": "192.168.100.21",
                    "ENGINE_ID": "3",
                   }
               ]
        }
        
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   }
               ]
        }

## Engine [/engine/{engine_id}]

### engine 상세정보 조회 - GET [GET]

- engine의 상세 정보 조회
        
+ Response 200 (application/json)

        {
               "ENGINE" : [
                   {
                        "IP_ADDR": "192.168.100.21",
                        "ENGINE_ID": "3",
                        "CPU": "23",
                        "RAM" : "30",
                        "MEMORY" : "11",
                        "IO_WAIT" : "1"
                   }
               ]
        }

### engine 정보 변경 - PUT [PUT]

- engine의 정보 변경
- ip 주소만 변경 가능

        
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   }
               ]
        }
        
### engine 삭제 - DELETE [DELETE]

- engine을 삭제함

        
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   }
               ]
        }
        

            
## Configs [/configs]

### config 조회 - GET [GET]

- WFE의 전반적인 설정 사항을 목록으로 가져옴
- CHANGEABLE 옵션을 주어 변경 가능 or 변경 불가능 옵션별 조회 가능
- KEY 옵션을 주어 특정 config 정보만 조회 가능


+ Request optional (application/json)

        ** optional
        
        {
                "CHANGEABLE" : ["TRUE"|"FALSE"],
                "KEY" : "[CONFIG_KEY]"
        }
        
+ Response 200 (application/json)

        
        {
               "CONFIGS" : [
                   {
                       "KEY" : "[KEY_STRING]",
                       "VALUE" : "[VALUE_STRING]",
                       "CHANGEABLE" : ["Y"|"N"]
                   },
                   ...
               ]
        }
        

### config 변경 - PUT [PUT]

- 저장된 설정 정보 변경
- CHANGEABLE이 TRUE인 설정만 변경 가능

+ Request (application/json)

        
        {
            "CONFIGS" : [
                   {
                       "KEY" : "[변경하고자 하는 KEY]",
                       "VALUE" : "[변경하고자 하는 VALUE]"
                   },
                   ...
            ]
        }
        

+ Response 200 (application/json)

        
        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   },
                   ...
               ]
        }
        
        

## Tasks [/tasks]

### task list 조회 - GET [GET]
- 등록된 Task를 목록으로 가져옴
- 옵션을 통해 특정 키나 특정 엔진의 task 리스트만 조회 가능
- task의 메타데이터 정보만 조회됨

    
+ Request optional (application/json)

        ** optional
        
        {
                "CHANGEABLE" : ["TRUE"|"FALSE"],
                "ENGINE_ID" : "1"
                "KEY" : "[KEY]"
        }
        
+ Response 200 (application/json)

        
        {
               "TASKS" : [
                   {
                        "ENGINE_ID": "ENGINE_ID",
                        "TASK_ID": "TASK_ID",
                        "TASK_NAME" : "TASK_NAME"
                        "TASK_URL" : "{engine_ip}/api/vi/{task_id}"
                   }
               ]
        }
        

### Task 생성 - POST [POST]

- task를 생성함
- Task option에 daemon여부 설정 가능
    - daemon이 아닌 경우 상시 동작하는 프로세스 


+ Request (application/json)

        {
               "TASK" : [
                   {
                        * task 생성 정보
                        "ENGINE_ID": "ENGINE_ID"
                        "TASK_ID":
                        "TASK_NAME":
                        "TYPE":
                        "COMMAND":
                        "DESCRIPTION":
                   }
               ]
        }
        
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   }
               ]
        }



## Task [/tasks/{task_id}]

### task 상세 정보 - GET [GET]

- 해당 task의 상세 정보를 가져옴

+ Response 200 (application/json)

        {
               "TASK" : [
                   {
                        "ENGINE_ID" : "[ENGINE_ID]",
                        "TASK_ID" : "[ID]", 
                        "TASK_NAME" : "[NAME]",
                        "TASK_TYPE": "[PROCESS]",
                        "DAEMON" : "[True]",
                        "PID": "PID",
                        "STATUS": "STATUS",
                        "JOB_REGISTERED": "yes/ no",
                        
                        "ACT-TIME" : "[ACT-TIME]", 
                        "ACT-STATUS" : "[ACT-STATUS]", 
                        "ACT-COUNT" : "[ACT-COUNT]",
                        "COMMAND" : "[COMMAND]",
                        
                        "CREATE_TIME": "20180707111111", 
                        "UPDATE_TIME": 
                        "LAST_EXECUTE_TIME":
                        "START_TIME":
                        "END_TIME":
                        "USER":
                        
                        "LAST-STATUS" : {
                           "LAST-STD-IN" : "[EVENT_DATA]",
                           "LAST-STD-OUT" : "[EVENT_DATA]",
                           "LAST-STD-ERR" : "[EVENT_DATA]"
                       },
                       "TASK_PROCESS": "ETL/ model ??"
                       "SOURCE_CODE": ""
                   }
               ]
           }

### task 상세 정보 변경 - PUT [PUT]
- task의 상세 정보를 변경

    
+ Request (application/json)

        [
            {
               "CONFIGS" : [
                   {
                       "KEY" : "[변경하고자 하는 KEY]",
                       "VALUE" : "[변경하고자 하는 VALUE]"
                   },
                   ...
               ]
           }
        ]
        
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   }
               ]
        }

### task 삭제 - DELETE [DELETE]

- 등록된 Task 삭제
- locking check

+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   },
                   ...
               ]
        }

## Task status [/tasks/{task_id}/status]

### Task 상태 변경 - PUT [PUT]

- task의 상태를 kill, pause, resume 을 통해 "ACT", "TRM" 시킴
- locking check
    
+ Request (application/json)

        [
            {
               "CONFIGS" : [
                   {
                       "KEY" : "[변경하고자 하는 KEY]",
                       "VALUE" : "[변경하고자 하는 VALUE]"
                   }
               ]
           }
        ]
        
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   }
               ]
        }


## Task resource [/tasks/{task_id}/resource]

### task 기반 리소스 모니터링 - GET [GET]

- task_id 기반 리소스 모니터링
    
+ Response 200 (application/json)

        {
               "RESOURCE" : [
                   {
                    "ENGINE_ID": "ENGINE_ID",
                    "CPU":,
                    "MEMORY":,
                    "DISK":,
                    "NETWORK":
                   }
               ]
        }


## Task queue [/tasks/{task_id}/queue]

### queue 정보 받아옴 - GET [GET]

- 해당 task의 모든 queue 정보를 가져옴
    
+ Response 200 (application/json)

        {
               "QUEUE" : [
                   {
                        "ENGINE_ID" : "ENGINE_ID",
                        "TASK_ID" : "TASK_ID",
                        "TASK_URL" : "{engine_ip}/tasks/{task_id}",
                        
                        "BROADCASTING STDIN" : [
                           ...
                        ],
                        "SHARING STDIN" : [
                           ...
                        ],
                        "ERROR" : [
                           ...
                        ]
                   }
               ]
        }

### queue에 데이터를 넣음 - PUT [PUT]
    
- 해당 task의 stdin queue에 데이터를 넣음

+ Request (application/json)

        {
               "MESSAGE" : "[MESSAGE_STRING]"
        }
        
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   }
               ]
        }

## Arrows [/arrows]

### arrow list 조회 - GET [GET]

- 등록된 arrow의 목록 조회

+ Request optional (application/json)

        ** optional
        
        {
                "CHANGEABLE" : ["TRUE"|"FALSE"],
                "ENGINE_ID" : "1"
                "KEY" : "[KEY]"
        }
        
+ Response 200 (application/json)

        
        {
               "ARROWS" : [
                   {
                        "ENGINE_ID": "ENGINE_ID",
                        "ARROW_ID": "ARROW_ID",
                        "ARROW_NAME" : "ARROW_NAME"
                        "ARROW_URL" : "{engine_ip}/api/vi/{arrow_id}"
                   }
               ]
        }

### arrow 등록 - POST [POST]

- 새로운 arrow를 등록함

+ Request (application/json)

        {
               "ARROWS" : [
                   {
                        * arrow 생성 정보
                        "ENGINE_ID": "ENGINE_ID"
                        "ARROW_ID":
                        "ARROW_NAME":
                        
                       "ARROW_TYPE": ["SHARE"|"BROAD"], 
                       "ARROW_FROM": "[FLOW FROM TASK NAME]",
                       "ARROW_TO": "[FLOW TO TASK NAME]"    
                   }
               ]
        }
        
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   }
               ]
        }
        

## Arrow [/arrows/{arrow_id}]

### arrow 상세 조회 - GET [GET]

+ Response 200 (application/json)

        {
               "ARROW" : [
                   {
                        "ENGINE_ID" : "[ENGINE_ID]",
                        "ARROW_ID" : "[ID]", 
                        "ARROW_NAME" : "[NAME]",
                        "ARROW_TYPE": "[BROAD/SHARED]",
                        
                        "ARROW_TYPE":
                       "BROAD" : [ 
                           {
                               "FROM" : "[TASK]",
                               "TO" : "[TASK]"
                           },
                           ...
                       ],
                       "SHARE" : [ 
                           {
                               "FROM" : "[TASK]",
                               "TO" : "[TASK]"
                           },
                           ...
                       ],
                       
                        "ACT-TIME" : "[ACT-TIME]", 
                        "ACT-STATUS" : "[ACT-STATUS]", 
                        "ACT-COUNT" : "[ACT-COUNT]",
                        "COMMAND" : "[COMMAND]",
                        
                        "CREATE_TIME": "20180707111111", 
                        "UPDATE_TIME": 
                        "LAST_EXECUTE_TIME":
                        "START_TIME":
                        "END_TIME":
                        "USER":
                        
                        "LAST-STATUS" : {
                           "LAST-STD-IN" : "[EVENT_DATA]",
                           "LAST-STD-OUT" : "[EVENT_DATA]",
                           "LAST-STD-ERR" : "[EVENT_DATA]"
                       }
                   }
               ]
           }


### arrow 정보 수정 - PUT [PUT]

- 해당 arrow를 수정함
- 수정 가능 사항만 수정 가능
    

+ Request (application/json)

        {
               "ARROW" : [
                   {
                       * arrow 수정 사항
                       "KEY" : "[변경하고자 하는 KEY]",
                       "VALUE" : "[변경하고자 하는 VALUE]"
                   }
               ]
        }
        
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   }
               ]
           }
           

### arrow 삭제 - DELETE [DELETE]

- 해당 arrow 등록 정보를 삭제함
- locking check
        
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   }
               ]
        }



## Flows [/flows]

### flow list 조회 - GET [GET]

- 등록된 flow 목록을 받아옴
    

+ Request (application/json)

        ** optional
        {
                "ENGINE_ID" : ""
               "TYPE" : ["SHARE"|"BROAD"],
               "TASK" : "[TASKS (with comma separator)]"
        }
        
+ Response 200 (application/json)

        {
               "FLOWS" : {
                    "ENGINE_ID": "ENGINE_ID",
                    "FLOW_ID": "F123",
                    "FLOW_NAME": "happy_flow",

               }
        }

### flow 생성 - POST [POST]

- flow를 세팅함
    

+ Request (application/json)

        {
               "FLOWS" : [
                   {
                        "ENGINE_ID": "ENGINE_ID",
                        "DESCRIPTION": "taskA, arrowA, taskB, arrowB, taskC",
                        "FLOW_ID":
                        "FLOW_NAME":

                   }
               ]
        }
        
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   }
               ]
           }


## Flow [/flows/{flow_id}]

### flow 상세 조회 - GET [GET]

- 해당 flow 상세 정보를 받아옴
    
+ Response 200 (application/json)

        {
               "FLOW" : {
                    "ENGINE_ID": "ENGINE_ID",
                    "FLOW_ID" : "FLOW_ID,
                    "FLOW_NAME" :  "FLOW_NAME",
                    "FLOW_STATUS": "standby/running/complete/warning",
                    "JOB_REGISTERED": "yes/ no",
                    
                    "FLOW_STRUCTURE" :,
                        "TASKS" : [
                            taskA [task_level1],
                            taskB [task_level2],
                            taskC [task_level3],
                            
                        ],
                        
                        "ARROWS" : [
                            arrowA,
                            arrowB,
                        ],
                    
                        "CREATE_TIME": "20180707111111", 
                        "UPDATE_TIME": 
                        "LAST_EXECUTE_TIME":
                        "START_TIME":
                        "END_TIME":
                        "USER":
                    ""
               }
        }

### flow 수정 - PUT [PUT]

- 해당 flow를 수정함
- 수정 가능 사항만 수정 가능
    

+ Request (application/json)

        {
               "FLOW" : [
                   {
                       * flow 수정 사항
                       "KEY" : "[변경하고자 하는 KEY]",
                       "VALUE" : "[변경하고자 하는 VALUE]"
                   }
               ]
        }
        
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   }
               ]
           }
           

### flow 삭제 - DELETE [DELETE]

- 해당 flow 등록 정보를 삭제함
- flow에 속한 task와 arrow는 삭제되지 않음
- locking check
        
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   }
               ]
        }

## Flow status [/flows/{flow_id}/status]

### flow 실행 제어 - PUT [PUT]

- locking check
- 실행 제어 단계 정의 ???
    - flow의 상태를 start/stop/run/kill 을 통해 "ACT", "TRM" 시킴
    - run : flow 실행 (flow 즉시 실행)
    - 이미 schedule에 의해 실행 중일 경우는 err 처리 후 err message 전송
    - running 중 next schecule 발생시 다음 schedule 로 skip
    - kill : flow 종료 (현재 진행 중인 flow의 모든 process 강제 종료)
    
+ Request (application/json)

        [
            {
               "STATUS" : "pause/resume/execute"
           }
        ]
        
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   }
               ]
        }
        
## Flow statistic [/flows/{flow_id}/statistic]

### flow 통계정보 조회 - GET [GET]

- flow의 통계 정보를 받아옴
    
+ Response 200 (application/json)

        {
               "FLOWS" : {
                * flow 통계 정보
                생성자, 실행자, 변경 history, 실행 결과 history 등
               }
        }


## Groups [/groups]

### group 조회 - GET [GET]

- 등록된 group 목록을 받아옴
- 옵션에 task_id를 포함하면 해당 task가 포함된 group만 조회됨
    

+ Request (application/json)

        ** optional
        {
               "TASK" : "[TASKS (with comma separator)]"
        }
        
+ Response 200 (application/json)

        {
               "GROUPS" : [
               
                    {
                        "ENGINE_ID" : "",
                        "GROUP_ID" : "",
                        "GROUP_NAME" : "",
                    }
                    
                    ...
               ]
        }
  
### group 생성 - POST [POST]

- group을 생성함

+ Request (application/json)

        {
               "ENIGINE_ID": "",
               "GROUP_NAME": "",
               "TASKS" : "a,b,c",
        }
        
+ Response 200 (application/json)

        {
                "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   },
                   ...
               ]
        }
    
## Group [/groups/{group_id}]

### group 상세 정보 조회 - GET [GET]

    
+ Response 200 (application/json)

        {
               "GROUP" : {
                    "ENGINE_ID" : "",
                        "GROUP_ID" : "",
                        "GROUP_NAME" : "",
                         "TASKS" : [
                                taskA,
                                taskB,
                                ...
                         ]
               }
        }
        

### group 정보 변경 - PUT [PUT]

+ Request (application/json)

        {
               "GROUP" : [
                   {
                       * group 수정 사항
                       "KEY" : "[변경하고자 하는 KEY]",
                       "VALUE" : "[변경하고자 하는 VALUE]"
                   }
               ]
        }
        
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   }
               ]
           }
           

### group 삭제 - DELETE [DELETE]
    
- group 삭제
           
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   },
                   ...
               ]
        }
        
## Group status [/groups/{group_id}/status]

### group 상태 변경 - PUT [PUT]

- group에 속한 모든  task상태를 끄거나 킴
    
+ Request (application/json)
           
        {
            "STATUS" : ["ACT"|"TRM"]
        }
           
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   },
                   ...
               ]
        }

        
## Jobs [/jobs]

### job list 조회 - GET [GET]

- 등록된 모든 job 목록 가져옴
- TASK나 FLOW 옵션을 통해 해당 FLOW나 TASK가 속한 JOB만 조회 가능
    
+ Request (application/json)

        ** optional
        {
               "TIME_FORMAT" : "[CRON_TYPE_TIME_FORMAT]",
               "TASK" : "[TASKS (with comma separator)]",
               "FLOW" : "[FLOWS (with comma separator)]",
               "ENGINE_ID" : ""
        }
        
+ Response 200 (application/json)

        {
               "JOBS" : [
                   {
                       "MESSAGE": "test", 
                       "TASK": "ps02", 
                       "TIME_FORMAT": "*/1 * * * *"
                   }
               ]
        }

### job 생성 - POST [POST]

- job을 생성함, crontab에 등록
    
+ Request (application/json)

        {
               "JOBS" : [
                   {
                        "ENGINE_ID": "",
                       "MESSAGE": "test", 
                       "TASK": "ps02", 
                       "TIME_FORMAT": "*/1 * * * *"
                   }
               ]
        }
        
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   }
               ]
        }     


## Job [/jobs/{job_id}]

### job 조회 - GET [GET]

- 해당 job의 싱세 정보 가져옴
    
+ Response 200 (application/json)

        {
            "JOB" : [
                   {
                       "ENGINE_ID": "",
                       "JOB_ID": "aa", 
                       "CREATE_TIME": "20180707111111", 
                       "UPDATE_TIME": 
                       "LAST_EXECUTE_TIME":
                       "USER":
                       "FLOW/TASK": "flow_name" or "task_list"
                       "STATE": "enable / disable"
                   }
            ]
        }

### job 상태 변경 - PUT [PUT]
- job 설정 정보 변경
    
+ Request (application/json)
           
        {
            * job 설정 정보 변경 : 시간, task, flow 등
        }
           
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   },
                   ...
               ]
        }
        
### job 삭제 - DELETE [DELETE]

- 등록되어있는 job을 삭제함
        
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   }
               ]
        }

## Job status [/jobs/{job_id}/status]


### Job 실행 제어 - PUT [PUT]

- job의 상태를 pause, resume 을 통해 "ACT", "TRM" 시킴
    
+ Request (application/json)

        [
            {
               "STATUS" : pause/resume/execute
           }
        ]
        
+ Response 200 (application/json)

        {
               "RESULTS" : [
                   {
                       "RESULT" : ["OK"|"NOK"],
                       "MESSAGE" : "[MESSAGE_STRING]"             
                   }
               ]
        }

## Jobs statistic [/jobs/{node_id}/{job_id}/statistic]

### Job 통계정보 조회 - GET [GET]

- Job 통계 정보를 받아옴
    
+ Response 200 (application/json)

        {
               "JOBS" : {
                * job 통계 정보
                생성자, 실행자, 변경 history, 실행 결과 history 등
               }
        }